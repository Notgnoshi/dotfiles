#!/usr/bin/env python3
"""Calculate statistics on the given CSV file.

For example, given the following CSV file,

    $ cat example.csv
    id,value,name
    0,0.0,first
    1,0.5,second
    2,0.75,third

you can calculate summary statistics on the 'value' column like so:

    $ csvstats --column value --summary --input example.csv
    num: 3
    min: 0.0
    max: 0.75
    sum: 1.25
    mean: 0.41666666666666663
    stddev: 0.3818813079129867
"""
import argparse
import csv
import logging
import math
import sys
from typing import List

from csvutils import column_name_to_index, detect_dialect


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="Set the logging output level. Defaults to INFO.",
    )
    group = parser.add_argument_group("I/O options")
    group.add_argument(
        "input",
        type=argparse.FileType("r"),
        default=sys.stdin,
        nargs="?",
        help="Script input. Defaults to stdin.",
    )
    group.add_argument(
        "--output",
        "-o",
        type=argparse.FileType("w"),
        default=sys.stdout,
        help="Script output. Defaults to stdout.",
    )

    group = parser.add_argument_group("CSV options")
    group.add_argument(
        "--no-header",
        action="store_true",
        default=False,
        help="Whether the CSV file has a header",
    )
    group.add_argument(
        "--column",
        "-c",
        required=True,
        default=None,
        help="Select the specified column from the CSV file",
    )
    group.add_argument(
        "--delimiter",
        "-d",
        default=",",
        help="Specify the column delimiter. Default is ','",
    )

    parser.add_argument(
        "--range",
        "-R",
        nargs=2,
        metavar=("MIN", "MAX"),
        type=float,
        default=None,
        help="Filter out values outside this range",
    )
    parser.add_argument(
        "--histogram",
        "-H",
        metavar="BINS",
        type=int,
        # False if not passed, None if passed but no value given, otherwise the number of bins
        default=False,
        nargs="?",
        help="Plot the histogram of the specified column. The number of bins will be guessed by default",
    )

    return parser.parse_args()


class OnlineVariance:
    """Welford's algorithm computes the sample variance incrementally.

    Adapted from https://stackoverflow.com/a/5544108
    """

    def __init__(self, ddof=1, iterable=None):
        # delta degrees of freedom. Some stddev calculations use ddof=0 (numpy) and some use ddof=1
        # (scipy, R)
        self.ddof = ddof
        self.n = 0
        self.mean = 0
        self.M2 = 0
        self.sum = 0
        self.min = sys.float_info.max
        self.min_idx = 0
        self.max = sys.float_info.min
        self.max_idx = 0

        if iterable is not None:
            for datum in iterable:
                self.add_value(datum)

    def add_value(self, datum):
        self.sum += datum
        if datum > self.max:
            self.max = datum
            self.max_idx = self.n
        if datum < self.min:
            self.min = datum
            self.min_idx = self.n
        self.n += 1
        delta = datum - self.mean
        self.mean += delta / self.n
        self.M2 += delta * (datum - self.mean)

    @property
    def variance(self):
        return self.M2 / (self.n - self.ddof)

    @property
    def stddev(self):
        return math.sqrt(self.variance)


def main(args):
    dialect, has_header, input = detect_dialect(args, args.input)
    reader = csv.reader(input, dialect)

    header = None
    if has_header:
        header = next(reader)

    column_index = column_name_to_index(args.column, header)

    if has_header:
        if column_index >= len(header):
            logging.critical(
                "Given column '%s' not found in header '%s'", args.column, ",".join(header)
            )
            sys.exit(1)

    values = []
    skipped = []
    stats = OnlineVariance()
    for row in reader:
        if column_index >= len(row):
            logging.critical("Row '%s' must be at least %d long", ", ".join(row), column_index + 1)
            sys.exit(1)
        value = row[column_index]
        if value == "":
            continue
        try:
            value = float(value)
        except ValueError:
            logging.critical("Cannot calculate deltas of non-number '%s'", value)
            sys.exit(1)

        if args.range is not None:
            min_, max_ = args.range
            if value < min_ or value > max_:
                skipped.append(value)
                continue

        if args.histogram is not False:
            values.append(value)
        stats.add_value(value)

    if skipped:
        print("excluded:", len(skipped), file=args.output)
        print("excluded min:", min(skipped), file=args.output)
        print("excluded max:", max(skipped), file=args.output)

    print("num:", stats.n, file=args.output)
    print(f"min: {stats.min} index: {stats.min_idx}", file=args.output)
    print(f"max: {stats.max} index: {stats.max_idx}", file=args.output)
    print("sum:", stats.sum, file=args.output)
    print("mean:", stats.mean, file=args.output)
    print("stddev:", stats.stddev, file=args.output)

    if args.histogram is not False:
        import matplotlib.pyplot as plt
        import seaborn as sns

        bins = "auto" if args.histogram is None else args.histogram

        sns.set_theme()
        ax = sns.histplot(values, kde=True, bins=bins)
        if has_header:
            name = header[column_index]
            ax.set(xlabel=name)
        plt.show()


if __name__ == "__main__":
    args = parse_args()
    fmt = "%(asctime)s - %(module)s - %(levelname)s: %(message)s"
    logging.basicConfig(
        format=fmt,
        level=args.log_level,
        stream=sys.stderr,
    )
    # Color log output if possible, because I'm a sucker
    try:
        import coloredlogs

        coloredlogs.install(fmt=fmt, level=args.log_level)
    except ImportError:
        pass
    main(args)
