#!/usr/bin/env python3
"""Plot columns in a CSV file."""
import argparse
import csv
import logging
import sys
import time
from typing import Optional

import matplotlib.pyplot as plt
import seaborn as sns
from csvutils import column_name_to_index, detect_dialect

logging.getLogger("matplotlib").setLevel(logging.INFO)
sns.set_theme()


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default="DEBUG",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="Set the logging output level. Defaults to INFO.",
    )
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        default=sys.stdin,
        nargs="?",
        help="Script input. Defaults to stdin.",
    )

    group = parser.add_argument_group("CSV options")
    group.add_argument(
        "--no-header",
        action="store_true",
        default=False,
        help="Whether the CSV file has a header",
    )
    group.add_argument(
        "--delimiter",
        "-d",
        default=",",
        help="Specify the column delimiter. Default is ','",
    )

    group = parser.add_argument_group("Plotting options")
    group.add_argument(
        "--kind",
        "-k",
        choices=["scatter", "line"],
        default="line",
        help="What kind of plot to make",
    )
    group.add_argument(
        "--xlim",
        metavar=("MIN", "MAX"),
        nargs=2,
        type=float,
        default=None,
        help="The x axis range",
    )
    group.add_argument(
        "--ylim",
        metavar=("MIN", "MAX"),
        nargs=2,
        type=float,
        default=None,
        help="The y axis range",
    )

    group = parser.add_argument_group("Data options")
    group.add_argument(
        "-x",
        default=None,
        help="The x column name, or index. If not given, will be the integer row IDs",
    )
    group.add_argument(
        "-y",
        action="append",
        default=None,
        required=True,
        help="The y column names(s) or indices. Required. May be given multiple times",
    )

    return parser.parse_args()


def parse_float(v: str) -> Optional[float]:
    try:
        return float(v)
    except ValueError:
        return None


def main(args):
    dialect, has_header, input_ = detect_dialect(args, args.input)
    reader = csv.reader(input_, dialect)

    header = None
    if has_header:
        header = next(reader)

    x_index = None
    x_name = ""
    if args.x is not None:
        x_index = column_name_to_index(args.x, header)
        if has_header:
            x_name = header[x_index]
        else:
            x_name = f"column {x_index}"
        logging.info("Picked column index %d as X variable", x_index)
    else:
        logging.info("Picking row indices as X variable")

    y_indices = []
    y_names = []
    for y in args.y:
        i = column_name_to_index(y, header)
        y_indices.append(i)
        if has_header:
            y_names.append(header[i])
        else:
            y_names.append(f"column {i}")
    logging.info("Picked %s column indices as Y variable(s)", y_indices)

    xs = []
    yss = [[] for _ in y_indices]

    logging.debug("Parsing CSV ...")
    start = time.time()
    row_index = 0
    for row in reader:
        x = row[x_index] if x_index is not None else row_index
        x = parse_float(x)
        xs.append(x)
        row_index += 1

        for yi, ci in enumerate(y_indices):
            y = row[ci]
            y = parse_float(y)
            yss[yi].append(y)

    logging.debug("Parsed CSV after %fs", time.time() - start)

    plotter = plt.plot if args.kind == "line" else plt.scatter
    for name, ys in zip(y_names, yss):
        logging.debug("Plotting '%s' ...", name)
        plotter(xs, ys, label=name)

    logging.debug("Configuring plot ...")
    ax = plt.gca()
    if args.xlim is not None:
        ax.set_xlim(args.xlim)
    if args.ylim is not None:
        ax.set_ylim(args.ylim)
    plt.xlabel(x_name)
    plt.legend(loc="upper right")
    logging.debug("Showing plot ...")
    plt.show()


if __name__ == "__main__":
    args = parse_args()
    fmt = "%(asctime)s - %(module)s - %(levelname)s: %(message)s"
    logging.basicConfig(
        format=fmt,
        level=args.log_level,
        stream=sys.stderr,
    )
    # Color log output if possible, because I'm a sucker
    try:
        import coloredlogs

        coloredlogs.install(fmt=fmt, level=args.log_level)
    except ImportError:
        pass
    main(args)
