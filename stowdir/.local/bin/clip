#!/bin/bash
set -o errexit
set -o pipefail
set -o nounset
# set -o noclobber

usage() {
    echo "Usage: $0 [--primary]"
    echo
    echo "Copy/paste to/from the system clipboard. Supports both X11 and Wayland via xclip/wl-clipboard"
    echo
    echo "  -h, --help          Show this help and exit"
    echo "  --primary           Operate on the PRIMARY clipboard instead of the default clipboard"
    echo
    echo "The intended operation (copy or paste) will be automatically detected based on whether"
    echo "you're redirecting output to/from this script."
}

check_dependencies() {
    local -a required_utils=()

    case "$XDG_SESSION_TYPE" in
    x11)
        # sudo apt install xclip
        required_utils+=(xclip)
        ;;
    wayland)
        # sudo apt install wl-clipboard
        required_utils+=(wl-copy wl-paste)
        ;;
    *)
        echo "Unrecognized XDG_SESSION_TYPE='$XDG_SESSION_TYPE'" >&2
        exit 1
        ;;
    esac

    for requirement in "${required_utils[@]}"; do
        if ! command -v "$requirement" >/dev/null 2>&1; then
            echo "Missing required dependencies '$requirement'" >&2
            exit 1
        fi
    done
}

copy_x11() {
    local clipboard="$1"
    local -a extra_args=()
    if [[ "$clipboard" == primary ]]; then
        extra_args+=(-selection primary)
    else
        extra_args+=(-selection clipboard)
    fi

    xclip -in "${extra_args[@]}"
}

paste_x11() {
    local clipboard="$1"
    local -a extra_args=()
    if [[ "$clipboard" == primary ]]; then
        extra_args+=(-selection primary)
    else
        extra_args+=(-selection clipboard)
    fi

    xclip -out "${extra_args[@]}"
}

copy_wayland() {
    local clipboard="$1"
    local -a extra_args=()
    if [[ "$clipboard" == primary ]]; then
        extra_args+=(--primary)
    fi

    wl-copy "${extra_args[@]}"
}

paste_wayland() {
    local clipboard="$1"
    local -a extra_args=()
    if [[ "$clipboard" == primary ]]; then
        extra_args+=(--primary)
    fi

    wl-paste --no-newline "${extra_args[@]}"
}

copy() {
    local clipboard="$1"
    case "$XDG_SESSION_TYPE" in
    x11)
        copy_x11 "$1"
        ;;
    wayland)
        copy_wayland "$1"
        ;;
    *)
        echo "Unrecognized XDG_SESSION_TYPE='$XDG_SESSION_TYPE'" >&2
        exit 1
        ;;
    esac
}

paste() {
    local clipboard="$1"
    case "$XDG_SESSION_TYPE" in
    x11)
        paste_x11 "$1"
        ;;
    wayland)
        paste_wayland "$1"
        ;;
    *)
        echo "Unrecognized XDG_SESSION_TYPE='$XDG_SESSION_TYPE'" >&2
        exit 1
        ;;
    esac
}

main() {
    local do_paste="false"
    local do_copy="false"
    # Either "primary", or "default"
    local clipboard="default"

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --help | -h)
            usage
            exit
            ;;
        --primary)
            clipboard="primary"
            ;;
        *)
            echo "Unexpected argument '$1'" >&2
            usage >&2
            exit 1
            ;;
        esac
        shift
    done

    check_dependencies

    # If stdout is not attached to a TTY, that means we're redirecting it, so we should paste
    # whatever is in the clipboard.
    if [[ ! -t 1 ]]; then
        do_paste="true"
    fi
    if [[ ! -t 0 ]]; then
        do_copy="true"
    fi
    # If we're not redirecting at all, then we're just running the script and dumping the clipboard
    # to the terminal.
    if [[ "$do_copy" == "false" && "$do_paste" == "false" ]]; then
        do_paste="true"
    fi

    if [[ "$do_paste" == "true" ]]; then
        paste "$clipboard" /dev/stdout
    fi
    # TODO: wl-copy hangs if its output (there is none) is being piped
    #       echo "foo" | clip >/tmp/clip.txt  # This works
    #       echo "foo" | clip | cat  # This "works" and then hangs
    if [[ "$do_copy" == "true" ]]; then
        copy "$clipboard" /dev/stdin
    fi
}

main "$@"
