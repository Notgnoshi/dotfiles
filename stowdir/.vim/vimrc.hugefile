"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theming.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO: Add Python support. Perhaps using https://www.vim.org/scripts/script.php?script_id=386
" or perhaps using https://github.com/andymass/vim-matchup and a ftplugin for
" adding Python b:match_words.
packadd! matchit
packadd! termdebug

" Prevent vim from detecting changes on-disk
set noautoread
autocmd FileChangedShell * :

" All packadds need to be before the `filetype indent plugin on` in order for
" ftdetect scripts to be loaded.
filetype indent plugin on
set nocompatible
" Set default encoding to UTF-8
set enc=utf-8

" Open man pages with :Man instead of shelling out.
set keywordprg=:Man

" Use ripgrep for :grep
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Allow switching away from an unsaved buffer without writing it.
" TODO: This is also what's responsible for the buffer tabline not working...
set hidden

" Number of visual spaces per TAB
set tabstop=4
" Number of spaces in tab when editing
set softtabstop=0
" Expand tabs with spaces.
set expandtab
set shiftwidth=4
set shiftround
set smarttab
set smartindent
set autoindent
set backspace=indent,eol,start
set nojoinspaces

"Use terminal title
set title
" Same as title string set by .bashrc, but with the filename and mode too.
set titlestring=%{$USER}@%{hostname()}:\ %F\ %m

" Show line numbers
set number
" Keep the cursor 6 lines from bottom of screen.
set scrolloff=6
set sidescrolloff=6
" Allow the cursor to move off the end of a line.
set virtualedit=all

" Allow fuzzy menu
set wildmenu
" Redraw screen lazily
set lazyredraw
"Matching brackets highlighted
set showmatch
" Show typed command in statusbar
set showcmd
" Highlight as characters are entered
set incsearch
set ignorecase
" Override ignorecase, unless the query contains a capital letter.
set smartcase
" Must be turned off manually
set hlsearch
" Show number of search results in statusline.
set shortmess-=S
" Use mouse interaction in every mode
set mouse=a

" The path used for gf and friends Set to the default value, but also add
" "**", which searches down from the current directory.
set path& | let &path .= "**"
" Files to ignore while searching
set wildignore+=.git/*,*/node_modules/*,*/target/*,*/build/*,*.class,*.png,*.gif,*.pdf,*.exe,*.o,*.so,*.jar,*.war,*.ear,*.dll,*.swp,*.zip

" enable code folding
set foldenable
set foldlevelstart=15
set foldnestmax=10
" Sure, syntax folding is nice, but it seriously slows down large C++ files
set foldmethod=indent

" Highlight current line
set cursorline
" Highlight current column
"set cursorcolumn
" Comma separated list of columns to highlight
set colorcolumn=100
set textwidth=100
augroup gitCommitLineLength
    autocmd!
    autocmd FileType gitcommit setlocal colorcolumn=72
augroup END
set display=truncate

" When creating a new window, make it equal sized to any currently open
" windows. E.g., when using vsplit multiple times.
set equalalways

" Generate the binary *.spl files from the plaintext *.add files checked into Git.
function! SetupSpellfile()
    for d in glob('~/.vim/spell/*.add', 1, 1)
        " This likely forces the generation of the binary .spl file. Until the
        " performance becomes noticeable, that's acceptable. Otherwise, I think a
        " git-hook, or a more sophisticated shell incantation to also _diff_ the
        " sorted file against the original one, would be the approach to use.
        if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
            silent exec 'mkspell! ' . fnameescape(d)
        endif
    endfor
endfunction

" Sort the spellfile, and remove duplicates right before Vim exits.
"
" NOTE: This relies on the vim-altscreen plugin (and requires myNoAltScreen augroup to be executed)
" to prevent :execute commands getting printed to the "normal" screen, which, even if you use
" "silent!", shoves the shell prompt to the bottom of the screen.
function! SortSpellfile()
    for d in glob('~/.vim/spell/*.add', 1, 1)
        silent! execute '!sort --unique ' shellescape(d) ' --output ' shellescape(d)
    endfor
endfunction

augroup setupSpellfileAfterStart
    autocmd!
    autocmd VimEnter * call SetupSpellfile()
augroup END

augroup sortSpellfileBeforeExit
    autocmd!
    autocmd VimLeave * call SortSpellfile()
augroup END

" Don't spellcheck everything, instead check a restricted subset of filetypes.
set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
" This is a vim 8.2 feature.
if exists("&spelloptions")
    set spelloptions=camel
endif

nnoremap <F7> :setlocal spell! spell?<CR>

augroup commentarySettings
    autocmd!
    autocmd FileType c,cpp set comments^=:///,://!
    autocmd FileType c,cpp setlocal commentstring=//\ %s
    autocmd FileType nginx,qmake setlocal commentstring=#\ %s
augroup END

function! s:paste_toggled(new, old) abort
    if a:new && !a:old
        let b:saved_foldexpr = &foldexpr
        let &l:foldexpr = ''
    elseif !a:new && a:old && exists('b:saved_foldexpr')
        let &l:foldexpr = b:saved_foldexpr
        unlet b:saved_foldexpr
    endif
endfunc

" Disable foldexpr when pasting to fix slow pasting performance.
augroup FastPaste
    autocmd!
    autocmd OptionSet paste call s:paste_toggled(v:option_new, v:option_old)
augroup END
set pastetoggle=<F5>

augroup autoOpenQuickFixAfterMake
    autocmd!
    autocmd QuickFixCmdPost make belowright cwindow
augroup END

let g:termdebug_wide = 1
augroup overrideRustGdb
    autocmd!
    autocmd FileType rust let g:termdebugger = 'rust-gdb'
augroup END

augroup overrideYamlIndentation
    autocmd!
    autocmd FileType yaml setlocal ts=4 sts=4 sw=4 expandtab
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Netrw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Close netrw if last window open.
augroup netrw_close
    autocmd!
    autocmd WinEnter * if winnr("$") == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw" | q | endif
augroup END

" Open netrw to the current file's directory
"
" I originally wanted it to open the CWD, and expand the tree to reveal the
" current file, but it appears that's not possible. So the next best thing is
" to open the current file's directory, and use "-" to open the parent
" directory.
command! NetrwFind let @/=expand("%:t") | execute 'Lexplore' expand("%:h") | normal n

function! ToggleNetrw()
    let i = bufnr("$")
    let wasOpen = 0
    while (i >= 1)
        if(getbufvar(i, "&filetype") == "netrw")
            silent exe "bwipeout " . i
            let wasOpen = 1
        endif
        let i-=1
    endwhile
    if !wasOpen
        silent NetrwFind
    endif
endfunction

" Use a tree display
let g:netrw_liststyle = 3
" Don't display to banner at the top
let g:netrw_banner = 0
" Open selected files in the previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Set netrw width percentage
let g:netrw_winsize = 18
" Enable the following hide patterns.
let g:netrw_hide = 1
" Hidden patterns. Respect gitignores and dotfiles.
" let g:netrw_list_hide = netrw_gitignore#Hide()
" BUG: netrw_gitignore#Hide() interprets '*.o' from the .gitignore as '.*\.o', which matches unexpected things
" let g:netrw_list_hide = substitute(g:netrw_list_hide, '\.\*\\\.o,', '', '')
let g:netrw_list_hide = ''
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide .= ',.*\.swp$'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" <F5> toggles paste mode

" Show the syntax groups at the location under the cursor.
map <F6> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" <F7> toggles spell mode
" <F8> toggles undo tree
" Toggle the netrw pane to the side.
noremap <silent> <F9> :call ToggleNetrw()<CR>

" Got to next/previous item in the quickfix list
nmap ]q :cnext
nmap [q :cprev
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Handle tmux $TERM quirks in vim
" See: https://stackoverflow.com/a/9674158
if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif

" Turn off search highlighting with enter
nnoremap <CR> :nohl<CR><CR>

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" These keybinds require a Vim built with the +clipboard feature.
" On Ubuntu, the vim-gtk package provides such a Vim.
inoremap <C-S-p> <ESC>"+Pa
inoremap <C-y> <ESC>"+yy
vnoremap <C-y> "+y
vnoremap <C-S-p> "+P
nnoremap <C-S-p> "+P
nnoremap <C-y> "+yy

" Map <space> to fold.
nnoremap <space> za

" Visual movement. Act as the arrow keys do when lines wrap.
nnoremap j gj
nnoremap k gk

" Don't bring comments on newlines over to column 0
inoremap # X<BS>#

" Open a new empty buffer.
nmap <C-t> :enew<CR>

" Make :bd not close any open windows
" https://vim.fandom.com/wiki/Deleting_a_buffer_without_closing_the_window
" https://stackoverflow.com/questions/2605036/how-to-redefine-a-command-in-vim
cnoreabbrev <expr> bd getcmdtype() == ":" && getcmdline() == 'bd' ? 'bprevious\|bdelete #' : 'bdelete'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
