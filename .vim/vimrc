" NOTE: Must be set *before* ALE is loaded to take effect.
let g:ale_completion_enabled = 1
execute pathogen#infect()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theming.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
colorscheme blaquemagick
" Only takes effect if added *after* 'syntax on'.
highlight Comment cterm=italic

let g:airline_theme='minimalist'
" Show opened buffers at the top of the screen.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin on
set nocompatible
" Set default encoding to UTF-8
set enc=utf-8

" Set autowrite for use with :make
set autowrite

" Number of visual spaces per TAB
set tabstop=4
" Number of spaces in tab when editing
set softtabstop=0
set expandtab
set shiftwidth=4
set smarttab
set backspace=indent,eol,start

"Use terminal title
set title
set titlestring=%F

" Show line numbers
set number
" Keep the cursor 6 lines from bottom of screen.
set scrolloff=6

" Allow fuzzy menu
set wildmenu
" Redraw screen lazily
set lazyredraw
"Matching brackets highlighted
set showmatch
" Highlight as characters are entered
set incsearch
" Must be turned off manually
set hlsearch

" enable code folding
set foldenable
set foldlevelstart=15
set foldnestmax=10
set foldmethod=syntax

" Highlight current line
set cursorline
" Highlight current column
"set cursorcolumn
" Comma separated list of columns to highlight
set colorcolumn=100,140

" When creating a new window, make it equal sized to any currently open
" windows. E.g., when using vsplit multiple times.
set equalalways

" Force vim to think .md are markdown files on older systems that don't
" have the filetype properly set in /usr/share/vim/vim74/filetype.vim
" (Looking at you $COMPANY dev servers)
autocmd BufNewFile,BufRead *.md set filetype=markdown
" Set Nginx conf filetype
au BufRead,BufNewFile *.nginx set ft=nginx
au BufRead,BufNewFile */etc/nginx/* set ft=nginx
au BufRead,BufNewFile */usr/local/nginx/conf/* set ft=nginx
au BufRead,BufNewFile nginx.conf set ft=nginx

" Vim natively knows about Doxygen.
let g:load_doxygen_syntax = 1

" TODO: Integrate spellchecking with ALE.
"set spell
set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
augroup spellingFiletypes
    autocmd!
    autocmd FileType vimwiki,markdown,text setlocal spell
augroup END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle paste mode with f3
set pastetoggle=<F3>
" Turn off search highlighting with enter
nnoremap <CR> :nohl<CR><CR>

" Use ctrl+[jk] to move lines up and down in normal, insert, and visual mode.
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Map <space> to fold.
nnoremap <space> za

" Visual movement. Act as the arrow keys do when lines wrap.
nnoremap j gj
nnoremap k gk

" Open a new empty buffer. Current buffer must be written.
nmap <C-t> :enew<CR>
" Move to the next buffer.
nmap <C-l> :bnext<CR>
" Move to the previous buffer.
nmap <C-h> :bprevious<CR>

" Open netrw to the side.
noremap <silent> <C-n> :call ToggleNetrw()<CR>

" TODO: Map these to things that make sense.
"<Plug>(ale_find_references)
"<Plug>(ale_go_to_definition)
"<Plug>(ale_go_to_type_definition)
" Display whatever info the LSP gives.
"<Plug>(ale_hover)
":ALERename
":ALESymbolSearch <query>
"<Plug>(ale_previous_wrap)
"<Plug>(ale_next_wrap)

" BUG: This appears to be very broken?
"imap <C-Space> <Plug>(ale_complete)
" NOTE: Vim can't distinguish <ctrl-shift-I> from <ctrl-I>
nmap <C-I> <Plug>(ale_fix)
"imap <C-I> <Plug>(ale_fix)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Stage  GitGutterStageHunk
command Revert GitGutterUndoHunk
" TODO: Figure out how to diff/show a hunk's changes.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Netrw
" NERDTree replacement that's baked into Vim.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Open netrw if no files were given to vim.
" BUG: When you open one of the listed files, the netrw window moves to the bottom of the screen.
augroup ProjectDrawer
    autocmd!
    autocmd VimEnter * if argc() == 0 | Explore! | endif
augroup END

" Close netrw if last window open.
augroup netrw_close
    autocmd!
    autocmd WinEnter * if winnr("$") == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw" | q | endif
augroup END

" Script to toggle netrw with <Ctrl-n>
function! ToggleNetrw()
    let i = bufnr("$")
    let wasOpen = 0
    while (i >= 1)
        if(getbufvar(i, "&filetype") == "netrw")
            silent exe "bwipeout " . i
            let wasOpen = 1
        endif
        let i-=1
    endwhile
    if !wasOpen
        silent Vexplore
    endif
endfunction

" Use a tree display
let g:netrw_liststyle = 3
" Don't display to banner at the top
let g:netrw_banner = 0
" Open selected files in the previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Set netrw width percentage
let g:netrw_winsize = 18
" Enable the following hide patterns.
" NOTE: Some vim versions I use don't support hiding files.
let g:netrw_hide = 1
" Hidden patterns. Respect gitignores and dotfiles.
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide .= ',.*\.swp$'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ale
" Provides asynchronous Language Server Protocol support.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Default fixers
" TODO: Add json and HTML formatters?
let g:ale_fixers = {
\   '*':        ['remove_trailing_lines', 'trim_whitespace'],
\   'diff':     [],
\   'python':   ['isort', 'black'],
\   'cpp':      ['clang-format'],
\   'c':        ['clang-format'],
\   'sh':       ['shfmt'],
\   'tex':      ['latexindent'],
\}

" Default linters
" TODO: Add plaintext and markdown linters.
" TODO: Add Dockerfile linter?
let g:ale_linters = {
\   'python':   ['pydocstyle'],
\   'tex':      ['chktex'],
\}

let g:ale_sign_column_always = 1
" Allow ALE to trigger manual completion with <C-X><C-O>
set omnifunc=ale#completion#OmniFunc

" TODO: ???
let g:ale_set_balloons = 1

" Show 5 lines of errors (default: 10)
let g:ale_list_window_size = 5

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_c_clang_options = '-std=c11 -Wall -Wextra -Wpedantic'
" TODO: Use gcc *or* clang, not both.
" TODO: Use clangd?
let g:ale_cpp_gcc_options = '-std=c++17 -Wall -Wextra -Wpedantic'
let g:ale_cpp_clang_options = '-std=c++17 -Wall -Wextra -Wpedantic'
" TODO: Provide list of clangtidy checks
" TODO: Learn how to configure these options per-project.
let g:ale_cpp_clangtidy_options = '-std=c++17 -Wall -Wextra -Wpedantic'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimwiki settings
" If :help vimwiki doesn't work, run :Helptags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let wiki = {}
let wiki.path = '~/Documents/notes'
let wiki.path_html = '~/Documents/notes/.vimwiki_html'
let wiki.syntax = 'markdown'
let wiki.ext = '.wiki'
let wiki.auto_tags = 1
let wiki.automatic_nested_syntaxes = 1
let wiki.nested_syntaxes = {'bash':'sh', 'shell':'sh', 'terminal':'sh', 'latex': 'tex'}
let g:vimwiki_list = [wiki]
let g:vimwiki_folding = 'expr'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
" Do not show the default mode indicator, because airline's is better.
" BUG: If the default indicator is left, I can leave INSERT mode with a single
" <C-c>, but I need to press it twice to make the indicator change.
" BUG: Something above is settings this back, so turn it off at the end.
set noshowmode
