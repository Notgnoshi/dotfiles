" NOTE: Must be set *before* ALE is loaded to take effect.
let g:ale_completion_enabled = 1
" Enable showing hover balloons when mousing over a symbol or problem.
let g:ale_set_balloons = 1
" Highlight marks in colors determined by vim-gitgutter
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1
execute pathogen#infect()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theming.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
colorscheme blaquemagick
" Only takes effect if added *after* 'syntax on'.
highlight Comment cterm=italic
" Need to distringuish Keyword from Normal enough so that gitcommitSummary is distinguishable.
highlight Keyword cterm=bold ctermfg=66
" Don't use blaquemagick blue/green/purple for gitgutter signs
highlight DiffDelete ctermfg=1 ctermbg=NONE
highlight DiffAdd    ctermfg=2 ctermbg=NONE
highlight DiffChange ctermfg=3 ctermbg=NONE

let g:airline_theme='minimalist'
" Show opened buffers at the top of the screen.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype indent plugin on
set nocompatible
" Set default encoding to UTF-8
set enc=utf-8

" Set autowrite for use with :make
set autowrite

" Number of visual spaces per TAB
set tabstop=4
" Number of spaces in tab when editing
set softtabstop=0
" Expand tabs with spaces.
set expandtab
set shiftwidth=4
set smarttab
set smartindent
set autoindent
set backspace=indent,eol,start

"Use terminal title
set title
" Same as title string set by .bashrc, but with the filename and mode too.
set titlestring=%{$USER}@%{hostname()}:\ %F\ %m

" Show line numbers
set number
" Keep the cursor 6 lines from bottom of screen.
set scrolloff=6
" Allow the cursor to move off the end of a line.
set virtualedit=all

" Allow fuzzy menu
set wildmenu
" Redraw screen lazily
set lazyredraw
"Matching brackets highlighted
set showmatch
" Show typed command in statusbar
set showcmd
" Highlight as characters are entered
set incsearch
set ignorecase
" Overrite ignorecase, unless the query contains a capital letter.
set smartcase
" Must be turned off manually
set hlsearch
" Use mouse interaction in every mode
set mouse=a

" enable code folding
set foldenable
set foldlevelstart=15
set foldnestmax=10
set foldmethod=syntax

" Highlight current line
set cursorline
" Highlight current column
"set cursorcolumn
" Comma separated list of columns to highlight
set colorcolumn=100

" When creating a new window, make it equal sized to any currently open
" windows. E.g., when using vsplit multiple times.
set equalalways

" Force vim to think .md are markdown files on older systems that don't
" have the filetype properly set in /usr/share/vim/vim74/filetype.vim
" (Looking at you $COMPANY dev servers)
autocmd BufNewFile,BufRead *.md set filetype=markdown
" Set Nginx conf filetype
au BufRead,BufNewFile *.nginx set ft=nginx
au BufRead,BufNewFile */etc/nginx/* set ft=nginx
au BufRead,BufNewFile */usr/local/nginx/conf/* set ft=nginx
au BufRead,BufNewFile nginx.conf set ft=nginx

" Vim natively knows about Doxygen.
let g:load_doxygen_syntax = 1

" The *.spl is a binary file format necessary for speed.
" But that doesn't track very well in git (and opens up potential for nasty conflicts).
" So generate the .spl file if the .add file is newer.
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        silent exec 'mkspell! ' . fnameescape(d)
    endif
endfor
" Don't spellcheck everything, instead check a restricted subset of filetypes.
set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
augroup spellingFiletypes
    autocmd!
    autocmd FileType vimwiki,markdown,text,gitcommit setlocal spell
augroup END

" Jump to last position when opening file.
augroup restoreCursorPosition
    let blacklist = ['gitcommit', 'gitrebase']
    autocmd BufReadPost * if index(blacklist, &ft) < 0 && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup END

augroup commentarySettings
    autocmd FileType c,cpp setlocal commentstring=//\ %s
augroup END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Stage  GitGutterStageHunk
command Revert GitGutterUndoHunk
" TODO: Figure out how to diff/show a hunk's changes.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Netrw
" NERDTree replacement that's baked into Vim.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Open netrw if no files were given to vim.
" BUG: When you open one of the listed files, the netrw window moves to the bottom of the screen.
augroup ProjectDrawer
    autocmd!
    autocmd VimEnter * if argc() == 0 | Explore! | endif
augroup END

" Close netrw if last window open.
augroup netrw_close
    autocmd!
    autocmd WinEnter * if winnr("$") == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw" | q | endif
augroup END

" Script to toggle netrw with <Ctrl-n>
function! ToggleNetrw()
    let i = bufnr("$")
    let wasOpen = 0
    while (i >= 1)
        if(getbufvar(i, "&filetype") == "netrw")
            silent exe "bwipeout " . i
            let wasOpen = 1
        endif
        let i-=1
    endwhile
    if !wasOpen
        silent Vexplore
    endif
endfunction

" Use a tree display
let g:netrw_liststyle = 3
" Don't display to banner at the top
let g:netrw_banner = 0
" Open selected files in the previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Set netrw width percentage
let g:netrw_winsize = 18
" Enable the following hide patterns.
" NOTE: Some vim versions I use don't support hiding files.
let g:netrw_hide = 1
" Hidden patterns. Respect gitignores and dotfiles.
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide .= ',.*\.swp$'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ale
" Provides asynchronous Language Server Protocol support.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Default fixers
let g:ale_fixers = {
\   '*':        ['remove_trailing_lines', 'trim_whitespace'],
\   'c':        ['clang-format'],
\   'cpp':      ['clang-format'],
\   'diff':     [],
\   'python':   ['isort', 'black'],
\   'sh':       ['shfmt'],
\   'tex':      ['latexindent'],
\}

" Default linters
let g:ale_linters = {
\   'python':   ['pydocstyle', 'pylint', 'pyls'],
\   'tex':      ['chktex'],
\   'cpp':      ['clangd', 'clangtidy'],
\}

let g:ale_sign_column_always = 1
" Allow ALE to trigger manual completion with <C-X><C-O>
set omnifunc=ale#completion#OmniFunc

"set completeopt=menu,menuone,preview,noselect,noinsert

" Show 5 lines of errors (default: 10)
let g:ale_list_window_size = 5

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_cpp_clangd_options = '--background-index --completion-style=bundled --header-insertion=iwyu --suggest-missing-includes -j=4'
let g:ale_cpp_clang_options = '-std=c++17 -Wall -Wextra -Wpedantic -x c++'
" TODO: Provide list of default clangtidy checks. Fallback to looking at .clang-tidy
" TODO: Provide default clang-tidy and clang-format configuration in $HOME
" TODO: Learn how to generate compile_commands.json
" TODO: Learn how to configure these options per-project.
let g:ale_cpp_clangtidy_options = '-std=c++17 -Wall -Wextra -Wpedantic -x c++'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
inoremap <C-Space> <C-@>
" BUG: This doesn't work in paste made.
let g:UltiSnipsExpandTrigger="<C-@>"
let g:UltiSnipsJumpForwardTrigger="<C-E>"
let g:UltiSnipsJumpBackwardTrigger="<C-Q>"

" Use an absolute path for a speedup.
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/snips']
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle paste mode with f3
set pastetoggle=<F3>
" Turn off search highlighting with enter
nnoremap <CR> :nohl<CR><CR>

" Use ctrl+[jk] to move lines up and down in normal, insert, and visual mode.
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Combined with adding the following to ~/.Xresources
" XTerm*vt100.translations: #override \n\
"    Ctrl ~Meta Shift <Key>a: string(0x1b) string("[65;5u") \n\
"    Ctrl ~Meta Shift <Key>i: string(0x1b) string("[73;5u") \n\
" This will map <C-S-a> and <C-a> differently.
" Unfortunately, this only works in XTerm terminals, which I don't use.
" map <ESC>[65;5u <C-S-a>
" map <ESC>[73;5u <C-S-i>
" map <C-S-a> :echo "ctrl shift a"<CR>
" map <C-a>   :echo "ctrl a"<CR>
" map <C-S-i> :echo "ctrl shift i"<CR>
" map <C-i>   :echo "ctrl i"<CR>

" Copy visual selection to clipboard. Works for <ctrl-c> not <ctrl-shift-c>
vnoremap <C-y> :'<,'>:w !xclip -selection clipboard<CR><CR>

" Map <space> to fold.
nnoremap <space> za

" Visual movement. Act as the arrow keys do when lines wrap.
nnoremap j gj
nnoremap k gk

" Open a new empty buffer. Current buffer must be written.
nmap <C-t> :enew<CR>
" Move to the next buffer.
nmap <C-l> :bnext<CR>
" Move to the previous buffer.
nmap <C-h> :bprevious<CR>

" Open netrw to the side. Use <C-B>, because that's the shortcut in VS Code.
noremap <silent> <C-B> :call ToggleNetrw()<CR>

" BUG: Vim can't distinguish <ctrl-shift-I> from <ctrl-I> from <Tab>
" https://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim
" I would prefer to use <C-S-I>, because that's the VS Code shortcut, and I already have it learned.
nmap <F1> <Plug>(ale_fix)
imap <F1> <C-\><C-O>:ALEFix<CR>

" gd is normally goto definition of word in current function. gD is in current file.
nmap gd <Plug>(ale_go_to_definition)
nmap <F2> <Plug>(ale_go_to_definition)
imap <F2> <C-\><C-O>:ALEGoToDefinition<CR>
" <F3> is pastetoggle
nmap <F4> <Plug>(ale_find_references)
imap <F4> <C-\><C-O>:ALEFindReferences<CR>

" Use <C-N>, because that's the default insert-mode dumb completion.
inoremap <C-N> <C-\><C-O>:ALEComplete<CR>

" Go to next problem.
nmap ]p <Plug>(ale_next_wrap)
nmap [p <Plug>(ale_previous_wrap)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimwiki settings
" If :help vimwiki doesn't work, run :Helptags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let wiki = {}
let wiki.path = '~/Documents/notes'
let wiki.path_html = '~/Documents/notes/.vimwiki_html'
let wiki.syntax = 'markdown'
let wiki.ext = '.wiki'
let wiki.auto_tags = 1
let wiki.automatic_nested_syntaxes = 1
let wiki.nested_syntaxes = {'bash':'sh', 'shell':'sh', 'terminal':'sh', 'latex': 'tex'}
let g:vimwiki_list = [wiki]
let g:vimwiki_folding = 'expr'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
" Do not show the default mode indicator, because airline's is better.
" BUG: If the default indicator is left, I can leave INSERT mode with a single
" <C-c>, but I need to press it twice to make the indicator change.
" BUG: Something above is settings this back, so turn it off at the end.
set noshowmode
