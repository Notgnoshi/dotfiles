" NOTE: Must be set *before* ALE is loaded to take effect.
let g:ale_completion_enabled = 1
" Enable showing hover balloons when mousing over a symbol or problem.
let g:ale_set_balloons = 1
" Highlight marks in colors determined by vim-gitgutter
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1

" Make the mundo preview window wider
let g:mundo_preview_bottom=1
execute pathogen#infect()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theming.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on

let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
let g:cpp_posix_standard = 1

let g:gruvbox_italic = 1
let g:gruvbox_termcolors=16
let g:gruvbox_improved_warnings=1
let g:gruvbox_contrast_dark="hard"

let g:gruvbox_invert_selection=0
set background=dark

runtime colors/gruvbox.vim

highlight! link cCustomClass    GruvboxPurple
highlight! link cCustomFunc     GruvboxBlue
highlight! link cppSTLfunction  cCustomFunc
highlight! link Type            GruvboxPurple
highlight! link Constant        GruvboxRed
highlight! link Number          GruvboxRed
highlight! link Operator        GruvboxGray
highlight! link Repeat          GruvboxBlueBold
highlight! link Conditional     GruvboxBlueBold
highlight! link Statement       GruvboxAquaBold
highlight! link StorageClass    GruvboxAqua
highlight! link cppCast         GruvboxRed
highlight! link Special         GruvboxPurpleBold
highlight! link pythonBuiltin   GruvboxPurpleBold
highlight! link Search          DiffAdd
highlight! link IncSearch       DiffAdd

highlight String          cterm=italic
highlight cppSTLtype      cterm=italic
highlight cppSTLnamespace cterm=italic

highlight Normal     ctermfg=NONE   ctermbg=NONE

highlight SpellLocal ctermfg=8
highlight MatchParen ctermfg=0      ctermbg=6

highlight SpellBad   ctermfg=0      ctermbg=1
highlight SpellRare  ctermfg=8      ctermbg=3
highlight SpellCap   ctermfg=8      ctermbg=2

" Orange isn't one of the 16 colors, so it doesn't quite work right with Tilix :/
highlight! link GruvboxOrange GruvboxYellowBold

highlight Comment           cterm=italic ctermfg=243
highlight CustomDoxyComment cterm=italic ctermfg=243

highlight CursorLine        ctermbg=237
highlight Visual            ctermbg=237

highlight! link doxygenComment  CustomDoxyComment
highlight! link doxygenBrief    CustomDoxyComment
highlight! link doxygenStartL   GruvboxBg2
highlight! link doxygenCommentL SpecialComment
highlight! link doxygenSpecialTypeOnelineDesc   SpecialComment
highlight! link doxygenSpecialOnelineDesc       CustomDoxyComment
highlight! link doxygenSpecialHeading           SpecialComment

" Make warnings stand out from info messages
" I don't know why this isn't the default.
highlight! link ALEWarning  SpellRare
highlight! link ALEInfo     SpellCap
" gruvbox undoes this, so I'm redoing it
highlight! link ALEError    SpellBad

let g:airline_theme='minimalist'
" Show opened buffers at the top of the screen.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Practical Vim, by Drew Neil, says to enable matchit with the following
"     runtime macros/matchit.vim
" but the matchit documentation says to use packadd.
" TODO: Add Python support. Perhaps using https://www.vim.org/scripts/script.php?script_id=386
" or perhaps using https://github.com/andymass/vim-matchup and a ftplugin for
" adding Python b:match_words.
packadd! matchit
packadd! termdebug

" All packadds need to be before the `filetype indent plugin on` in order for
" ftdetect scripts to be loaded.
filetype indent plugin on
set nocompatible
" Set default encoding to UTF-8
set enc=utf-8

" Open man pages with :Man instead of shelling out.
set keywordprg=:Man

" Set autowrite for use with :make
set autowrite
" autoread will check for external file changes when a command is run, which
" is only part of the answer if we want Vim to load external changes.
" So we use https://github.com/djoshea/vim-autoread which checks for changes
" every four seconds (configurable with 'updatetime').
set autoread
" Check files and GitGutter hunks for changes every 100 ms
set updatetime=100

" Number of visual spaces per TAB
set tabstop=4
" Number of spaces in tab when editing
set softtabstop=0
" Expand tabs with spaces.
set expandtab
set shiftwidth=4
set shiftround
set smarttab
set smartindent
set autoindent
set backspace=indent,eol,start

"Use terminal title
set title
" Same as title string set by .bashrc, but with the filename and mode too.
set titlestring=%{$USER}@%{hostname()}:\ %F\ %m

" Show line numbers
set number
" Keep the cursor 6 lines from bottom of screen.
set scrolloff=6
" Allow the cursor to move off the end of a line.
set virtualedit=all

" Allow fuzzy menu
set wildmenu
" Redraw screen lazily
set lazyredraw
"Matching brackets highlighted
set showmatch
" Show typed command in statusbar
set showcmd
" Highlight as characters are entered
set incsearch
set ignorecase
" Override ignorecase, unless the query contains a capital letter.
set smartcase
" Must be turned off manually
set hlsearch
" Use mouse interaction in every mode
set mouse=a

" enable code folding
set foldenable
set foldlevelstart=15
set foldnestmax=10
" Sure, syntax folding is nice, but it seriously slows down large C++ files
set foldmethod=indent

" Highlight current line
set cursorline
" Highlight current column
"set cursorcolumn
" Comma separated list of columns to highlight
set colorcolumn=100
augroup gitCommitLineLength
    autocmd!
    autocmd FileType gitcommit setlocal colorcolumn=72
augroup END
set display=truncate

" When creating a new window, make it equal sized to any currently open
" windows. E.g., when using vsplit multiple times.
set equalalways

if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif
set undodir=~/.vim/undo
set undofile
nnoremap <F8> :MundoToggle<CR>

" Force vim to think .md are markdown files on older systems that don't
" have the filetype properly set in /usr/share/vim/vim74/filetype.vim
" (Looking at you $COMPANY dev servers)
autocmd BufNewFile,BufRead *.md set filetype=markdown
" Set Nginx conf filetype
au BufRead,BufNewFile *.nginx set ft=nginx
au BufRead,BufNewFile */etc/nginx/* set ft=nginx
au BufRead,BufNewFile */usr/local/nginx/conf/* set ft=nginx
au BufRead,BufNewFile nginx.conf set ft=nginx
au BufRead,BufNewFile nginx/*.conf set ft=nginx

" Vim natively knows about Doxygen.
let g:load_doxygen_syntax = 1
let g:doxygen_enhanced_color = 0

" The *.spl is a binary file format necessary for speed.
" But that doesn't track very well in git (and opens up potential for nasty conflicts).
" So generate the .spl file if the .add file is newer.
for d in glob('~/.vim/spell/*.add', 1, 1)
    " BUG: This clears the screen, so when you exit vim, the prompt is on the
    " bottom of the screen. This is surprisingly frustrating.
    "
    "     silent! execute '!sort --unique ' fnameescape(d) ' --output ' fnameescape(d)

    " This likely forces the generation of the binary .spl file. Until the
    " performance becomes noticeable, that's acceptable. Otherwise, I think a
    " git-hook, or a more sophisticated shell incantation to also _diff_ the
    " sorted file against the original one, would be the approach to use.
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        silent exec 'mkspell! ' . fnameescape(d)
    endif
endfor
" Don't spellcheck everything, instead check a restricted subset of filetypes.
set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
" This is a vim 8.2 feature.
if exists("&spelloptions")
    set spelloptions=camel
endif

augroup spellingFiletypes
    autocmd!
    autocmd FileType vimwiki,markdown,text,gitcommit setlocal spell
augroup END
nnoremap <F7> :setlocal spell! spell?<CR>

" ! - save and restore global variables
" ' - Maximum number of files to remember marks from
" / - Maximum number of items in the search pattern history to remember
" : - Maximum number of items in the command history to remember
" < - Maximum number of lines saved for each register
" s - Maximum size of registers in Kbytes
" h - Disable hlsearch when loading viminfo
set viminfo=!,'500,/5000,:5000,<500,s1000,h
set viminfofile=~/.vim/viminfo
augroup doNotUseViminfoFor
    " Using a viminfo file restores the last cursor position.
    " This is awkward for commit messages and the git-rebase-todo. So disable it.
    autocmd FileType gitcommit,gitrebase setlocal viminfo=
augroup END

augroup commentarySettings
    autocmd FileType c,cpp set comments^=:///,://!
    autocmd FileType c,cpp setlocal commentstring=//\ %s
    autocmd FileType nginx,qmake setlocal commentstring=#\ %s
augroup END

function! s:paste_toggled(new, old) abort
    if a:new && !a:old
        let b:saved_foldexpr = &foldexpr
        let &l:foldexpr = ''
    elseif !a:new && a:old && exists('b:saved_foldexpr')
        let &l:foldexpr = b:saved_foldexpr
        unlet b:saved_foldexpr
    endif
endfunc

" Disable foldexpr when pasting to fix slow pasting performance.
augroup FastPaste
    autocmd OptionSet paste call s:paste_toggled(v:option_new, v:option_old)
augroup END
set pastetoggle=<F5>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Netrw
" NERDTree replacement that's baked into Vim.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" It's easy enough to hit <C-B> to open the netrw window that this isn't worth dealing with
" " Open netrw if no files were given to vim.
" " BUG: When you open one of the listed files, the netrw window moves to the bottom of the screen.
" augroup ProjectDrawer
"     autocmd!
"     autocmd VimEnter * if argc() == 0 | Lexplore! | endif
" augroup END

" Close netrw if last window open.
augroup netrw_close
    autocmd!
    autocmd WinEnter * if winnr("$") == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw" | q | endif
augroup END

function! ToggleNetrw()
    let i = bufnr("$")
    let wasOpen = 0
    while (i >= 1)
        if(getbufvar(i, "&filetype") == "netrw")
            silent exe "bwipeout " . i
            let wasOpen = 1
        endif
        let i-=1
    endwhile
    if !wasOpen
        silent Lexplore
    endif
endfunction

" Use a tree display
let g:netrw_liststyle = 3
" Don't display to banner at the top
let g:netrw_banner = 0
" Open selected files in the previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Set netrw width percentage
let g:netrw_winsize = 18
" Enable the following hide patterns.
let g:netrw_hide = 1
" Hidden patterns. Respect gitignores and dotfiles.
" let g:netrw_list_hide = netrw_gitignore#Hide()
" BUG: netrw_gitignore#Hide() interprets '*.o' from the .gitignore as '.*\.o', which matches unexpected things
" let g:netrw_list_hide = substitute(g:netrw_list_hide, '\.\*\\\.o,', '', '')
let g:netrw_list_hide = ''
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide .= ',.*\.swp$'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
"
"   <F1> - run all available fixers, in the order specified by g:ale_fixers.
"   <F2> - go to definition (Qt Creator shortcut) (also 'gd', which I use more often)
"   <F3> - find references
"   <F4> - toggle header/source (Qt Creator shortcut)
"   :ALERename - rename symbol under cursor
"   ]p,[p - next/previous problem
"
" ALE Completion
"
"   Use <C-n> for regular omnicompletion. Otherwise, ALE auto-triggers
"   completion as you type. It doesn't always trigger the completion popup
"   when typing '.' or '->' (I'd prefer to immediately get a list of methods
"   and/or attributes.
"
"   <C-n> - In insert mode, triggers omnicompletion. If ALE has automatically
"           triggered the completion popup, <C-n> and <C-p> will navigate the
"           popup.
"   <CR>  - Use <CR> to accept a selected completion.
"
" TODO: Find a way to manually trigger ALE completion. The suggested
"   inoremap <silent> <C-Space> <C-\><C-O>:AleComplete<CR>
" or
"   imap <C-Space> <Plug>(ale_complete)
" don't work (regardless of the mapping).
" TODO: Find a way to make ALE include snippets in its completion. Right now,
" you have to remember the name of the snippet, and press <Tab> to expand.
" BUG: Vim sometimes segfaults when editing Python projects
"
" UltiSnips
"
"   <Tab>   - expand snippet, and navigate forward through tab stops
"   <S-Tab> - navigate backwards through tab stops
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Override the automatically loaded fixers and linters for certain filetypes.
let g:ale_fixers = {
            \   '*':        ['remove_trailing_lines', 'trim_whitespace'],
            \   'c':        ['clang-format'],
            \   'cmake':    ['cmakeformat'],
            \   'cpp':      ['clangtidy', 'clang-format'],
            \   'css':      ['prettier'],
            \   'diff':     [],
            \   'html':     ['prettier'],
            \   'javascript':['prettier'],
            \   'python':   ['isort', 'black'],
            \   'rust':     ['rustfmt'],
            \   'sh':       ['shfmt'],
            \   'tex':      ['latexindent'],
            \}
let g:ale_linters = {
            \   'cmake':    ['cmakelint'],
            \   'cpp':      ['clangd'],
            \   'python':   ['pydocstyle', 'pylint', 'pyls', 'jedils'],
            \   'rust':     ['analyzer'],
            \   'tex':      ['chktex'],
            \}

let g:ale_sign_column_always = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%severity%][%linter%][%code%] %s'

let g:ale_python_black_options = '--line-length=100'
let g:ale_python_pydocstyle_options = '--add-ignore=D100'
" 120 is too much for javascript, but just about right for HTML, which is the
" more common use-case for me.
let g:ale_javascript_prettier_options = '--print-width 120 --prose-wrap always --tab-width 4 --html-whitespace-sensitivity css'

" You probably want clangd-11 for project-specific config files.
" https://clangd.llvm.org/config.html
" Additionally, you can set g:ale_cpp_clangd_executable, or use update-alternatives:
"   sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-11 100
let g:ale_cpp_clangd_options = '
            \ --background-index
            \ --header-insertion=iwyu
            \ --pch-storage=memory
            \ --completion-style=bundled
            \ --compute-dead
            \ --query-driver="/opt/poky/1.5.1/**/i586-poky-linux-*,/opt/dey/1.6.7/**/arm-dey-linux-gnueabi-*"
            \ -j=4
            \ --clang-tidy
            \'
" Install with
"     rustup +nightly component add rust-analyzer-preview
let g:ale_rust_analyzer_executable = "/home/nots/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rust-analyzer"

set completeopt=menu,menuone,popup
" If the completion popup is visible, accept the selected completion on <Enter>
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" BUG: Vim can't distinguish <ctrl-shift-I> from <ctrl-I> from <Tab>
" https://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim
" I would prefer to use <C-S-I>, because that's the VS Code shortcut, and I already have it learned.
nmap <F1> <Plug>(ale_fix)
imap <F1> <C-\><C-O>:ALEFix<CR>

" gd is normally goto definition of word in current function. gD is in current file. So rebind to use LSP-aware goto def.
nmap gd <Plug>(ale_go_to_definition)
nmap <F2> <Plug>(ale_go_to_definition)
imap <F2> <C-\><C-O>:ALEGoToDefinition<CR>

" Find references to the symbol under the cursor.
" TODO: Use FZF to select and preview (with syntax highlighting!)
" See https://github.com/dense-analysis/ale/issues/2252
" TODO: Use ALERepeatSelection to re-open results (Maybe find a way to keep
" the window open until it's closed manually?)
nmap <F3> <Plug>(ale_find_references)
imap <F3> <C-\><C-O>:ALEFindReferences<CR>

" Toggle between header and source. Use a plugin rather than a simple
" s/.cpp/.h/ replacement because you can have .hpp, .HPP, .cxx, and more
nnoremap <F4> :call CurtineIncSw()<CR>
inoremap <F4> <C-\><C-O>:call CurtineIncSw()<CR>

" <F5> toggles paste mode

" Show the syntax groups at the location under the cursor.
map <F6> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" <F7> toggles spell mode
" <F8> toggles undo tree
" Toggle the netrw pane to the side.
noremap <silent> <F9> :call ToggleNetrw()<CR>

" Go to next/previous problems
" Can also open  loclist with :lopen
nmap ]p <Plug>(ale_next_wrap)
nmap [p <Plug>(ale_previous_wrap)

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
" Use an absolute path for a speedup.
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/snips']
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybinds
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn off search highlighting with enter
nnoremap <CR> :nohl<CR><CR>

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Use ctrl+[jk] to move lines up and down in normal, insert, and visual mode.
" TODO: Something with QtCreator seems to have broken -- these no longer work...
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Combined with adding the following to ~/.Xresources
" XTerm*vt100.translations: #override \n\
"    Ctrl ~Meta Shift <Key>a: string(0x1b) string("[65;5u") \n\
"    Ctrl ~Meta Shift <Key>i: string(0x1b) string("[73;5u") \n\
" This will map <C-S-a> and <C-a> differently.
" Unfortunately, this only works in XTerm terminals, which I don't use.
" map <ESC>[65;5u <C-S-a>
" map <ESC>[73;5u <C-S-i>
" map <C-S-a> :echo "ctrl shift a"<CR>
" map <C-a>   :echo "ctrl a"<CR>
" map <C-S-i> :echo "ctrl shift i"<CR>
" map <C-i>   :echo "ctrl i"<CR>

" BUG: The following copies the whole line
" vnoremap <C-y> !xclip -filter -selection clipboard<CR>

" " Use vim-fakeclip to use xclip for X11 clipboard integration.
" vmap <C-x> <Plug>(fakeclip-d)
" vmap <C-y> <Plug>(fakeclip-y)
" nmap <C-p> <Plug>(fakeclip-p)
" vmap <C-p> <Plug>(fakeclip-p)

" These keybinds require a Vim built with the +clipboard feature.
" On Ubuntu, the vim-gtk package provides such a Vim.
inoremap <C-p> <ESC>"+pa
inoremap <C-y> <ESC>"+yy
vnoremap <C-y> "+y
vnoremap <C-p> "+p
nnoremap <C-p> "+p
nnoremap <C-y> "+yy

" Map <space> to fold.
nnoremap <space> za

" Visual movement. Act as the arrow keys do when lines wrap.
nnoremap j gj
nnoremap k gk

" Open a new empty buffer. Current buffer must be written.
nmap <C-t> :enew<CR>
" Move to the next buffer.
nmap <C-l> :bnext<CR>
" Move to the previous buffer.
nmap <C-h> :bprevious<CR>

" Use fzf.vim to open searchable list of buffers and their previews.
noremap <silent> <C-F><C-B> :Buffers<CR>
noremap <silent> <C-F><C-F> :Files<CR>
" If run on a visual selection, it will show the history for that selection.
" Otherwise, show the history for the current buffer.
noremap <silent> <C-F><C-G> :BCommits<CR>
noremap <silent> <C-F><C-M> :Marks<CR>
" noremap <silent> <C-F><C-S> :Snippets<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimwiki settings
" If :help vimwiki doesn't work, run :Helptags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let wiki = {}
let wiki.path = '~/Documents/notes'
let wiki.path_html = '~/Documents/notes/.vimwiki_html'
let wiki.syntax = 'markdown'
let wiki.ext = '.wiki'
let wiki.auto_tags = 1
let wiki.automatic_nested_syntaxes = 1
let wiki.nested_syntaxes = {'bash':'sh', 'shell':'sh', 'terminal':'sh', 'latex': 'tex'}
let g:vimwiki_list = [wiki]
let g:vimwiki_folding = 'expr'
let g:vimwiki_table_mappings = 0
let g:vimwiki_key_mappings = { 'table_mappings': 0, }
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
" Do not show the default mode indicator, because airline's is better.
" BUG: If the default indicator is left, I can leave INSERT mode with a single
" <C-c>, but I need to press it twice to make the indicator change.
" BUG: Something above is settings this back, so turn it off at the end.
set noshowmode
